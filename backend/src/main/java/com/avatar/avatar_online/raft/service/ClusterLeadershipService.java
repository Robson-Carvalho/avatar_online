package com.avatar.avatar_online.raft.service;

import com.avatar.avatar_online.raft.model.LeaderInfo;
import com.avatar.avatar_online.service.LogConsensusService;
import com.hazelcast.cluster.MembershipEvent;
import com.hazelcast.cluster.MembershipListener;
import com.hazelcast.core.HazelcastInstance;

import com.hazelcast.map.IMap;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

@Service
public class ClusterLeadershipService {

    private final HazelcastInstance hazelcast;
    private final LeaderRegistryService leaderRegistryService;
    private final ApplicationContext applicationContext;
    private final LogConsensusService  logConsensusService;

    private ScheduledExecutorService electionScheduler;
    private ScheduledExecutorService cleanupScheduler;
    private AtomicBoolean isLeader = new AtomicBoolean(false);
    private AtomicBoolean electionActive = new AtomicBoolean(false);

    private static final String LEADER_ELECTION_MAP = "leader-election";
    private static final String LEADER_KEY = "current-leader-node";
    private String currentNodeId;

    public ClusterLeadershipService(@Qualifier("hazelcastInstance") HazelcastInstance hazelcast,
                                    LeaderRegistryService leaderRegistryService,
                                    ApplicationContext applicationContext, LogConsensusService logConsensusService) {
        this.hazelcast = hazelcast;
        this.leaderRegistryService = leaderRegistryService;
        this.applicationContext = applicationContext;
        this.logConsensusService = logConsensusService;
    }

    public void init() {
        this.currentNodeId = hazelcast.getCluster().getLocalMember().getUuid().toString();
        this.electionScheduler = Executors.newSingleThreadScheduledExecutor();
        this.cleanupScheduler = Executors.newSingleThreadScheduledExecutor();

        startLeaderElection();
        startCleanupTask();
        setupClusterListeners();

        System.out.println("üöÄ Servi√ßo de lideran√ßa inicializado - N√≥: " + currentNodeId);
    }

    /**
     * Algoritmo de elei√ß√£o de l√≠der baseado em IMap
     */
    private void startLeaderElection() {
        electionScheduler.scheduleAtFixedRate(() -> {
            if (electionActive.get()) return;

            electionActive.set(true);
            try {
                performLeaderElection();
            } finally {
                electionActive.set(false);
            }
        }, 0, 3, TimeUnit.SECONDS);
    }

    private void performLeaderElection() {
        IMap<String, String> electionMap = hazelcast.getMap(LEADER_ELECTION_MAP);

        String previousLeaderId = electionMap.putIfAbsent(LEADER_KEY, currentNodeId, 10, TimeUnit.SECONDS);

        if (previousLeaderId == null || previousLeaderId.equals(currentNodeId)) {

            if (!isLeader.get() || previousLeaderId == null) {

                if (isLogUpToDate()) {

                    long newTerm = leaderRegistryService.incrementTerm();

                    onBecomeLeader(newTerm);
                } else {
                    System.out.println("‚ùå Elei√ß√£o falhou: N√≥ " + currentNodeId +
                            " possui Termo/Log desatualizado. Removendo lock.");
                    electionMap.remove(LEADER_KEY, currentNodeId); // Remove o pr√≥prio lock
                    return;
                }
            }

            if (isLeader.get()) {
                electionMap.put(LEADER_KEY, currentNodeId, 10, TimeUnit.SECONDS);
            }

        } else {
            LeaderInfo currentLeader = leaderRegistryService.getCurrentLeader();

            if (isLeader.get() && (currentLeader == null || !currentLeader.getNodeId().equals(currentNodeId))) {
                onLostLeadership();
            }
        }
    }

    private boolean isLogUpToDate() {
        long myIndex = logConsensusService.getMyLastCommittedIndex();

        Map<String, Long> allLogs = logConsensusService.getAllNodeLogIndices();

        long maxIndex = allLogs.values().stream()
                .max(Long::compare)
                .orElse(0L);
        boolean upToDate = (myIndex >= maxIndex);

        if (!upToDate) {
            System.out.println("‚ö†Ô∏è Valida√ß√£o de Log: Meu √≠ndice (" + myIndex +
                    ") √© menor que o √≠ndice m√°ximo (" + maxIndex + ").");
        }

        return upToDate;
    }

    private void onBecomeLeader(long term) {
        isLeader.set(true);
        String nodeInfo = hazelcast.getCluster().getLocalMember().getAddress().toString();
        System.out.println("üéØ EU SOU O L√çDER AGORA! N√≥: " + nodeInfo + ", Termo: " + term);

        // Registra como l√≠der no cluster
        leaderRegistryService.registerAsLeader(term);

        logConsensusService.updateLastCommittedIndex(logConsensusService.getMyLastCommittedIndex());

        startLeaderSync();

        // For√ßa sincroniza√ß√£o inicial
        new Thread(() -> {
            try {
                Thread.sleep(3000); // Aguarda 3 segundos
                performInitialLeaderSync();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }).start();
    }

    /**
     *  ACESSO INDIRETO AO DatabaseSyncService
     */
    private void startLeaderSync() {
        try {
            DatabaseSyncService databaseSyncService = applicationContext.getBean(DatabaseSyncService.class);
            //databaseSyncService.startLeaderSync();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao iniciar sincroniza√ß√£o do l√≠der: " + e.getMessage());
        }
    }

    /**
     *  ACESSO INDIRETO AO DatabaseSyncService
     */
    private void performInitialLeaderSync() {
        try {
            DatabaseSyncService databaseSyncService = applicationContext.getBean(DatabaseSyncService.class);
            new Thread(() -> {
                try {
                    Thread.sleep(2000);
                    // Usa reflex√£o ou m√©todo p√∫blico para sincroniza√ß√£o
                    //databaseSyncService.forceSync();
                } catch (Exception e) {
                    System.err.println("‚ùå Erro na sincroniza√ß√£o inicial: " + e.getMessage());
                }
            }).start();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao acessar servi√ßo de sincroniza√ß√£o: " + e.getMessage());
        }
    }

    private void onLostLeadership() {
        isLeader.set(false);
        System.out.println("üë• Perdi a lideran√ßa. Agora sou seguidor.");

        // Remove registro de l√≠der
        leaderRegistryService.unregisterAsLeader();

        //  ACESSO INDIRETO PARA PARAR SINCRONIZA√á√ÉO
        stopLeaderSync();
    }

    /**
     *  ACESSO INDIRETO AO DatabaseSyncService
     */
    private void stopLeaderSync() {
        try {
            DatabaseSyncService databaseSyncService = applicationContext.getBean(DatabaseSyncService.class);
            //databaseSyncService.stopLeaderSync();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao parar sincroniza√ß√£o: " + e.getMessage());
        }
    }

    private void startCleanupTask() {
        cleanupScheduler.scheduleAtFixedRate(() -> {
            try {
                leaderRegistryService.cleanupExpiredLeaders();

                // Limpa l√≠deres expirados no mapa de elei√ß√£o
                IMap<String, String> electionMap = hazelcast.getMap(LEADER_ELECTION_MAP);
                String currentLeader = electionMap.get(LEADER_KEY);

                if (currentLeader != null) {
                    // Verifica se o l√≠der ainda est√° no cluster
                    boolean leaderStillInCluster = hazelcast.getCluster().getMembers().stream()
                            .anyMatch(member -> member.getUuid().toString().equals(currentLeader));

                    if (!leaderStillInCluster) {
                        electionMap.remove(LEADER_KEY);
                        System.out.println("üßπ L√≠der expirado removido da elei√ß√£o: " + currentLeader);
                    }
                }

            } catch (Exception e) {
                System.err.println("‚ùå Erro na limpeza: " + e.getMessage());
            }
        }, 0, 30, TimeUnit.SECONDS);
    }

    private void setupClusterListeners() {
        hazelcast.getCluster().addMembershipListener(new MembershipListener() {
            @Override
            public void memberAdded(MembershipEvent event) {
                String newMemberId = event.getMember().getUuid().toString();
                System.out.println("üü¢ Novo n√≥ entrou: " + event.getMember() + " [ID: " + newMemberId + "]");

                if (isLeader.get()) {
                    // Como l√≠der, sincroniza o novo n√≥
                    syncNewNode();
                } else {
                    // Se este n√≥ √© o novo n√≥ que entrou, sincroniza com l√≠der
                    if (newMemberId.equals(currentNodeId)) {
                        System.out.println("üÜï Este √© o novo n√≥ - sincronizando com l√≠der...");
                        // Aguarda um pouco para o cluster estabilizar
                        new Thread(() -> {
                            try {
                                Thread.sleep(10000); // 10 segundos
                                syncNewNode();
                            } catch (InterruptedException e) {
                                Thread.currentThread().interrupt();
                            }
                        }).start();
                    } else {
                        // N√≥ existente detectou outro novo n√≥ - verifica sincroniza√ß√£o
                        checkSyncNeeded();
                    }
                }
            }

            @Override
            public void memberRemoved(MembershipEvent event) {
                String removedMemberId = event.getMember().getUuid().toString();
                System.out.println("üî¥ N√≥ saiu: " + event.getMember() + " [ID: " + removedMemberId + "]");

                // Se o l√≠der saiu, for√ßa nova elei√ß√£o
                IMap<String, String> electionMap = hazelcast.getMap(LEADER_ELECTION_MAP);
                String currentLeader = electionMap.get(LEADER_KEY);

                if (removedMemberId.equals(currentLeader)) {
                    System.out.println("‚ö° L√≠der saiu - for√ßando nova elei√ß√£o");
                    electionMap.remove(LEADER_KEY);

                    // Aguarda um pouco antes da nova elei√ß√£o
                    new Thread(() -> {
                        try {
                            Thread.sleep(5000);
                            performLeaderElection();
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                        }
                    }).start();
                }
            }
        });
    }

    /**
     *  ACESSO INDIRETO PARA SINCRONIZA√á√ÉO
     */
    private void syncNewNode() {
        try {
            System.out.println("üì° Sincronizando dados com n√≥s (seguidores)");
            DatabaseSyncService databaseSyncService = applicationContext.getBean(DatabaseSyncService.class);
            //databaseSyncService.syncNewNode();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao sincronizar novo n√≥: " + e.getMessage());
        }
    }

    /**
     *  ACESSO INDIRETO PARA VERIFICA√á√ÉO DE SINCRONIZA√á√ÉO
     */
    private void checkSyncNeeded() {
        try {
            DatabaseSyncService databaseSyncService = applicationContext.getBean(DatabaseSyncService.class);
            //databaseSyncService.checkSyncNeeded();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao verificar sincroniza√ß√£o: " + e.getMessage());
        }
    }

    public boolean isLeader() {
        return isLeader.get();
    }

    public String getLeaderInfo() {
        LeaderInfo leader = leaderRegistryService.getCurrentLeader();
        if (leader != null) {
            return isLeader.get() ?
                    "Este n√≥ √© o L√çDER (" + leader.getHttpAddress() + ")" :
                    "Este n√≥ √© SEGUIDOR. L√≠der: " + leader.getHttpAddress();
        } else {
            // Fallback para mapa de elei√ß√£o
            IMap<String, String> electionMap = hazelcast.getMap(LEADER_ELECTION_MAP);
            String electionLeader = electionMap.get(LEADER_KEY);

            if (electionLeader != null && electionLeader.equals(currentNodeId)) {
                return "Este n√≥ √© o L√çDER (elei√ß√£o)";
            } else if (electionLeader != null) {
                return "Este n√≥ √© SEGUIDOR. L√≠der da elei√ß√£o: " + electionLeader;
            } else {
                return "L√≠der n√£o definido - Em processo de elei√ß√£o";
            }
        }
    }

    public int getClusterSize() {
        return hazelcast.getCluster().getMembers().size();
    }

    public String getCurrentNodeId() {
        return currentNodeId;
    }

    public boolean hasActiveLeader() {
        IMap<String, String> electionMap = hazelcast.getMap(LEADER_ELECTION_MAP);
        String currentLeader = electionMap.get(LEADER_KEY);

        if (currentLeader == null) {
            return false;
        }

        // Verifica se o l√≠der ainda est√° no cluster
        return hazelcast.getCluster().getMembers().stream()
                .anyMatch(member -> member.getUuid().toString().equals(currentLeader));
    }

    /**
     * For√ßa uma nova elei√ß√£o de lideran√ßa
     */
    public void forceElection() {
        System.out.println("‚ö° For√ßando nova elei√ß√£o de lideran√ßa");
        IMap<String, String> electionMap = hazelcast.getMap(LEADER_ELECTION_MAP);
        electionMap.remove(LEADER_KEY);

        new Thread(() -> {
            try {
                Thread.sleep(1000);
                performLeaderElection();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }).start();
    }
}